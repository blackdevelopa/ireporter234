// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Login />  should render without crashing 1`] = `
<Provider
  context={
    Object {
      "$$typeof": Symbol(react.context),
      "Consumer": Object {
        "$$typeof": Symbol(react.context),
        "_calculateChangedBits": null,
        "_context": [Circular],
      },
      "Provider": Object {
        "$$typeof": Symbol(react.provider),
        "_context": [Circular],
      },
      "_calculateChangedBits": null,
      "_currentRenderer": Object {},
      "_currentRenderer2": null,
      "_currentValue": undefined,
      "_currentValue2": undefined,
    }
  }
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "81d863",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "81d863",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Connect(withRouter(LoginForm))
        context={
          Object {
            "$$typeof": Symbol(react.context),
            "Consumer": Object {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": [Circular],
            },
            "Provider": Object {
              "$$typeof": Symbol(react.provider),
              "_context": [Circular],
            },
            "_calculateChangedBits": null,
            "_currentRenderer": Object {},
            "_currentRenderer2": null,
            "_currentValue": undefined,
            "_currentValue2": undefined,
          }
        }
      >
        <withRouter(LoginForm)
          context={
            Object {
              "$$typeof": Symbol(react.context),
              "Consumer": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": [Circular],
              },
              "Provider": Object {
                "$$typeof": Symbol(react.provider),
                "_context": [Circular],
              },
              "_calculateChangedBits": null,
              "_currentRenderer": Object {},
              "_currentRenderer2": null,
              "_currentValue": undefined,
              "_currentValue2": undefined,
            }
          }
          isAuthenticated={false}
          loginUser={[Function]}
        >
          <Route>
            <LoginForm
              context={
                Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": Object {
                    "$$typeof": Symbol(react.context),
                    "_calculateChangedBits": null,
                    "_context": [Circular],
                  },
                  "Provider": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": [Circular],
                  },
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": undefined,
                  "_currentValue2": undefined,
                }
              }
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "canGo": [Function],
                  "createHref": [Function],
                  "entries": Array [
                    Object {
                      "hash": "",
                      "key": "81d863",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                  ],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "index": 0,
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "key": "81d863",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              isAuthenticated={false}
              location={
                Object {
                  "hash": "",
                  "key": "81d863",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                }
              }
              loginUser={[Function]}
              match={
                Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
            >
              <div
                className="sweet-loading"
              >
                <Form
                  as="form"
                  id="loginForm"
                  onSubmit={[Function]}
                >
                  <form
                    className="ui form"
                    id="loginForm"
                    onSubmit={[Function]}
                  >
                    <FormField
                      control={[Function]}
                      label="Email Address"
                      name="email"
                      onChange={[Function]}
                      placeholder="name@email.com"
                      required={true}
                      type="email"
                    >
                      <div
                        className="required field"
                      >
                        <label>
                          Email Address
                        </label>
                        <Input
                          name="email"
                          onChange={[Function]}
                          placeholder="name@email.com"
                          required={true}
                          type="email"
                        >
                          <div
                            className="ui input"
                          >
                            <input
                              name="email"
                              onChange={[Function]}
                              placeholder="name@email.com"
                              required={true}
                              type="email"
                            />
                          </div>
                        </Input>
                      </div>
                    </FormField>
                    <FormField
                      control={[Function]}
                      input="Password"
                      label="Password"
                      name="password"
                      onChange={[Function]}
                      placeholder="secret"
                      required={true}
                    >
                      <div
                        className="required field"
                      >
                        <label>
                          Password
                        </label>
                        <Input
                          input="Password"
                          name="password"
                          onChange={[Function]}
                          placeholder="secret"
                          required={true}
                          type="text"
                        >
                          <div
                            className="ui input"
                          >
                            <input
                              name="password"
                              onChange={[Function]}
                              placeholder="secret"
                              required={true}
                              type="Password"
                            />
                          </div>
                        </Input>
                      </div>
                    </FormField>
                    <Button
                      as="button"
                      style={
                        Object {
                          "background": "green",
                          "color": "white",
                        }
                      }
                      type="submit"
                    >
                      <Ref
                        innerRef={
                          Object {
                            "current": <button
                              class="ui button"
                              style="background: green; color: white;"
                              type="submit"
                            >
                              Login
                            </button>,
                          }
                        }
                      >
                        <RefFindNode
                          innerRef={
                            Object {
                              "current": <button
                                class="ui button"
                                style="background: green; color: white;"
                                type="submit"
                              >
                                Login
                              </button>,
                            }
                          }
                        >
                          <button
                            className="ui button"
                            onClick={[Function]}
                            style={
                              Object {
                                "background": "green",
                                "color": "white",
                              }
                            }
                            type="submit"
                          >
                            Login
                          </button>
                        </RefFindNode>
                      </Ref>
                    </Button>
                  </form>
                </Form>
              </div>
            </LoginForm>
          </Route>
        </withRouter(LoginForm)>
      </Connect(withRouter(LoginForm))>
    </Router>
  </MemoryRouter>
</Provider>
`;
