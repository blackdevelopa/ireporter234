// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Register /> rendering should render without 1`] = `
<Provider
  context={
    Object {
      "$$typeof": Symbol(react.context),
      "Consumer": Object {
        "$$typeof": Symbol(react.context),
        "_calculateChangedBits": null,
        "_context": [Circular],
      },
      "Provider": Object {
        "$$typeof": Symbol(react.provider),
        "_context": [Circular],
      },
      "_calculateChangedBits": null,
      "_currentRenderer": Object {},
      "_currentRenderer2": null,
      "_currentValue": undefined,
      "_currentValue2": undefined,
    }
  }
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "dwbyz6",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "dwbyz6",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Connect(withRouter(RegisterForm))
        context={
          Object {
            "$$typeof": Symbol(react.context),
            "Consumer": Object {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": [Circular],
            },
            "Provider": Object {
              "$$typeof": Symbol(react.provider),
              "_context": [Circular],
            },
            "_calculateChangedBits": null,
            "_currentRenderer": Object {},
            "_currentRenderer2": null,
            "_currentValue": undefined,
            "_currentValue2": undefined,
          }
        }
      >
        <withRouter(RegisterForm)
          context={
            Object {
              "$$typeof": Symbol(react.context),
              "Consumer": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": [Circular],
              },
              "Provider": Object {
                "$$typeof": Symbol(react.provider),
                "_context": [Circular],
              },
              "_calculateChangedBits": null,
              "_currentRenderer": Object {},
              "_currentRenderer2": null,
              "_currentValue": undefined,
              "_currentValue2": undefined,
            }
          }
          isAuthenticated={false}
          registerUser={[Function]}
        >
          <Route>
            <RegisterForm
              context={
                Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": Object {
                    "$$typeof": Symbol(react.context),
                    "_calculateChangedBits": null,
                    "_context": [Circular],
                  },
                  "Provider": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": [Circular],
                  },
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": undefined,
                  "_currentValue2": undefined,
                }
              }
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "canGo": [Function],
                  "createHref": [Function],
                  "entries": Array [
                    Object {
                      "hash": "",
                      "key": "dwbyz6",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                  ],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "index": 0,
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "key": "dwbyz6",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              isAuthenticated={false}
              location={
                Object {
                  "hash": "",
                  "key": "dwbyz6",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                }
              }
              match={
                Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
              registerUser={[Function]}
            >
              <Form
                as="form"
                onSubmit={[Function]}
              >
                <form
                  className="ui form"
                  onSubmit={[Function]}
                >
                  <FormField
                    control={[Function]}
                    label="Full Name"
                    name="firstname"
                    onChange={[Function]}
                    placeholder="full name"
                    required={true}
                  >
                    <div
                      className="required field"
                    >
                      <label>
                        Full Name
                      </label>
                      <Input
                        name="firstname"
                        onChange={[Function]}
                        placeholder="full name"
                        required={true}
                        type="text"
                      >
                        <div
                          className="ui input"
                        >
                          <input
                            name="firstname"
                            onChange={[Function]}
                            placeholder="full name"
                            required={true}
                            type="text"
                          />
                        </div>
                      </Input>
                    </div>
                  </FormField>
                  <FormField
                    control={[Function]}
                    label="Userame"
                    name="username"
                    onChange={[Function]}
                    placeholder="username"
                    required={true}
                  >
                    <div
                      className="required field"
                    >
                      <label>
                        Userame
                      </label>
                      <Input
                        name="username"
                        onChange={[Function]}
                        placeholder="username"
                        required={true}
                        type="text"
                      >
                        <div
                          className="ui input"
                        >
                          <input
                            name="username"
                            onChange={[Function]}
                            placeholder="username"
                            required={true}
                            type="text"
                          />
                        </div>
                      </Input>
                    </div>
                  </FormField>
                  <FormField
                    control={[Function]}
                    label="Email Address"
                    name="email"
                    onChange={[Function]}
                    placeholder="name@email.com"
                    required={true}
                    type="email"
                    value=""
                  >
                    <div
                      className="required field"
                    >
                      <label>
                        Email Address
                      </label>
                      <Input
                        name="email"
                        onChange={[Function]}
                        placeholder="name@email.com"
                        required={true}
                        type="email"
                        value=""
                      >
                        <div
                          className="ui input"
                        >
                          <input
                            name="email"
                            onChange={[Function]}
                            placeholder="name@email.com"
                            required={true}
                            type="email"
                            value=""
                          />
                        </div>
                      </Input>
                    </div>
                  </FormField>
                  <FormField
                    control={[Function]}
                    input="Password"
                    label="Password"
                    minLength="6"
                    name="password"
                    onChange={[Function]}
                    placeholder="secret"
                    required={true}
                    value=""
                  >
                    <div
                      className="required field"
                    >
                      <label>
                        Password
                      </label>
                      <Input
                        input="Password"
                        minLength="6"
                        name="password"
                        onChange={[Function]}
                        placeholder="secret"
                        required={true}
                        type="text"
                        value=""
                      >
                        <div
                          className="ui input"
                        >
                          <input
                            minLength="6"
                            name="password"
                            onChange={[Function]}
                            placeholder="secret"
                            required={true}
                            type="Password"
                            value=""
                          />
                        </div>
                      </Input>
                    </div>
                  </FormField>
                  <Button
                    as="button"
                    style={
                      Object {
                        "background": "green",
                        "color": "white",
                      }
                    }
                    type="submit"
                  >
                    <Ref
                      innerRef={
                        Object {
                          "current": <button
                            class="ui button"
                            style="background: green; color: white;"
                            type="submit"
                          >
                            Register
                          </button>,
                        }
                      }
                    >
                      <RefFindNode
                        innerRef={
                          Object {
                            "current": <button
                              class="ui button"
                              style="background: green; color: white;"
                              type="submit"
                            >
                              Register
                            </button>,
                          }
                        }
                      >
                        <button
                          className="ui button"
                          onClick={[Function]}
                          style={
                            Object {
                              "background": "green",
                              "color": "white",
                            }
                          }
                          type="submit"
                        >
                          Register
                        </button>
                      </RefFindNode>
                    </Ref>
                  </Button>
                </form>
              </Form>
            </RegisterForm>
          </Route>
        </withRouter(RegisterForm)>
      </Connect(withRouter(RegisterForm))>
    </Router>
  </MemoryRouter>
</Provider>
`;
